
@startuml 
Title IAM Domains

IdentityProvider -- IdentityManagement
IdentityProvider -- ResourceManagement

AccessControl -- IdentityManagement
AccessControl -- PrivilegeManagement

IdentityManagement - PrivilegeManagement 
IdentityManagement -- TenantManagement

IdentityProvider : Exchange credentials for access token
IdentityProvider : --
IdentityProvider : **Protected by:**
IdentityProvider : * write: public-private key encryption
IdentityProvider : * write: AWS IAM
IdentityProvider : * read: public
IdentityProvider : **Storage:** CRUD
IdentityProvider : **Actors:** IdentityManagement, ResourceManagement
IdentityProvider : **Audience:** Users
IdentityProvider : ==
IdentityProvider : Identity #Internal
IdentityProvider : Roles #Internal
IdentityProvider : --
IdentityProvider : Authenticate (user-creds):token
IdentityProvider : ChangePassword()

AccessControl : Validates access inline to user requests
AccessControl : --
AccessControl : **Protected by:**
AccessControl : * write: public-private key encryption
AccessControl : * write: AWS IAM
AccessControl : * read: public
AccessControl : **Storage:** CRUD
AccessControl : **Actors:** IdentityManagement
AccessControl : **Audience:** Users
AccessControl : ==
AccessControl : Roles #Internal
AccessControl : Resources #Internal
AccessControl : Privileges #Internal
AccessControl : ValidateAuthorization (token,resource)

ResourceManagement : Which systems can talk to which systems
ResourceManagement : --
ResourceManagement : **Protected by:** User-access-control
ResourceManagement : **Storage:** CRUD
ResourceManagement : **Actors:** Build System
ResourceManagement : **Audience:** IdentityProvider
ResourceManagement : ==
ResourceManagement : resource-scope mappings #Editable/Queryable
ResourceManagement : scope-client mappings #Editable/Queryable

IdentityManagement : Describe the organization of users
IdentityManagement : --
IdentityManagement : **Protected by:** User-access-control
IdentityManagement : **Storage:** Event Sourcing
IdentityManagement : **Actors:** Administrators, Users
IdentityManagement : **Audience:** AccessControl, IdentityProvider
IdentityManagement : ==
IdentityManagement : user-profile #Editable
IdentityManagement : user-group mapping #Editable
IdentityManagement : group-group mapping #Editable
IdentityManagement : --
IdentityManagement : role-principle mapping #Editable
IdentityManagement : tenant-principle mapping #Editable
IdentityManagement : ou-principle mapping #Editable
IdentityManagement : --
IdentityManagement : UpdateUserInfo()
IdentityManagement : UpdateGroupInfo()

PrivilegeManagement : Associate endpoints, privileges, and roles
PrivilegeManagement : --
PrivilegeManagement : **Protected by:** 
PrivilegeManagement : * Scopes
PrivilegeManagement : * public-private key encryption
PrivilegeManagement : * AWS IAM
PrivilegeManagement : **Storage:** CRUD
PrivilegeManagement : **Actors:** Build System
PrivilegeManagement : **Audience:** IdentityManagement, AccessControl
PrivilegeManagement : ==
PrivilegeManagement : endpoint-privilege mappings #Editable/Queryable
PrivilegeManagement : privilege-role mappings #Editable/Queryable
PrivilegeManagement : --
PrivilegeManagement : GrantPrivileges()

TenantManagement : Describe the customers that you serve
TenantManagement : --
TenantManagement : **Protected by:** User-access-control
TenantManagement : **Storage:** Event Sourcing
TenantManagement : **Actors:** Administrators
TenantManagement : **Audience:** Administrators, IdentityManagement
TenantManagement : ==
TenantManagement : tenant-profile #Editable
TenantManagement : tenant-privilege mapping #Editable

@enduml

@startuml
title Data model (alt 1: logical)

package IdentityManagement {
    class "Role" as idrole
    Principal <|-- User
    Principal <|-- Group
    Principal -* idrole
}

package EndpointControlManagement {
    class "Role" as privrole
    class "Resource" as epresource
    privrole *-* Privilege 
    Privilege *-* Endpoint
    Endpoint -* DataConstraints
    Endpoint *-- epresource 
}

package ResourceManagement {
    class "Resource" as rsresource
    Client *-* Scope
    Scope *--* rsresource
}

rsresource - epresource
idrole - privrole

@enduml

@startuml
title Data model (alt 2: simplified)

package IdentityManagement {
    class "Role" as idrole
    Principal <|-- User
    Principal <|-- Group
    Principal -* idrole
}

package ResourceManagement {
    class "Role" as privrole
    idrole - privrole
    privrole *-* Privilege 
    
    Privilege *-* Endpoint
    Endpoint -* DataConstraints
    Endpoint *-- Resource 
    Client *-* Scope
    Scope *--* Resource
    
}


@enduml

@startuml
title Data model (alt 3: dynamic roles)

package IdentityManagement {
    class "Role" as idrole
    Principal <|-- User
    Principal <|-- Group
    Principal -* idrole
}

package Architect {
    class "Resource" as epresource
    Client *-* Scope
    Scope *-* epresource
}

package ResourceManagement {
    class "Resources" as resource
    Endpoint -* DataConstraints
    Privilege *-* Endpoint
    resource --* Endpoint
}

package AccessControlManagement {
    class "Role" as eprole
    class "Privilege" as eppriv
    eprole *-* eppriv 
}

idrole -- eprole
epresource - resource
eppriv - Privilege 

@enduml

@startuml
title Event Sourcing workflow
actor -> handler: Command
handler -> eventstore: Get events
handler <-- eventstore: events
handler -> evolver: events
handler <-- evolver: previous state
note over handler
    Side effects
    Generate events
end note
handler -> evolver: new event
handler <-- evolver: new state

handler -> eventstore: event
eventstore -> subscribers: Event
@enduml


@startuml
title IdentityManagement-to-IdentityServer
actor User as user

box "IdentityManagement"
    boundary WWW as www
    control "Event Source\nAggregate" as es
    control "Publisher" as publish
    entity "a group" as group
end box

box "Authentication Server"
    participant "Identity Server" as idserver
end box

activate group
activate idserver
group Authenticated User
user -> www: Update group\n(DTO)
activate www
end group
www -> es: Update group\n(Command)
deactivate www
activate es
es -> group: changes applied
es -> publish: Group updated\n(Event)
deactivate es
activate publish
publish -> idserver: Group updated\n(Event)
deactivate publish
group OAuth2: Client Credentials
    group <- idserver: GetState\n(Query)
    group --> idserver
end
deactivate group
deactivate idserver
@enduml